name: Django CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  WEB_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/core_app:latest
  NGINX_IMAGE: ghcr.io/$(echo $GITHUB_REPOSITORY | tr '[:upper:]' '[:lower:]')/nginx    

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      id: setup-python
      with:
        python-version: ${{ matrix.python-version }}
      
    - uses: actions/cache@v3
      id: cache-dependencies
      with:
        path: |
          venv
        key: ${{ runner.os }}-venv-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/*requirements.txt') }}    

    # - uses: actions/checkout@v3
    #   name: Cache pip dependencies
    # - uses: actions/setup-python@v4
    #   with:
    #     python-version: '3.9'
    #     cache: 'pip'

    - name: Install dependencies
      if: steps.cache-dependencies.outputs.cache-hit != 'true'
      run: |
        python -m venv venv
        . venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r requirements.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    strategy:
      max-parallel: 1
      matrix:
        python-version: [3.9]
    steps:
    - uses: actions/checkout@master
    - name: Setup Python
      uses: actions/setup-python@master
      with:
        python-version: '3.9'
    - name: Generate coverage report
      run: |
        pip install pytest
        pip install pytest-cov
        pytest --cov=./ --cov-report=xml
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./
        env_vars: OS,PYTHON
        fail_ci_if_error: true
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        verbose: true

  build-docker-image:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout master
        uses: actions/checkout@v1
      - name: Add environment variables to .env
        run: |
          echo "SECRET_KEY=${{ secrets.SECRET_KEY }}" >> .env

      - name: Set environment variables
        run: |
          echo "WEB_IMAGE=$(echo ${{env.WEB_IMAGE}} )" >> $GITHUB_ENV
          echo "NGINX_IMAGE=$(echo ${{env.NGINX_IMAGE}} )" >> $GITHUB_ENV
      - name: Log in to GitHub Packages
        run: echo ${TOKEN} | docker login ghcr.io -u ${{ secrets.NAMESPACE }} --password-stdin
        env:
          TOKEN: ${{ secrets.TOKEN }}
      - name: Pull images
        run: |
          docker pull ${{ env.WEB_IMAGE }} || true
          docker pull ${{ env.NGINX_IMAGE }} || true
      - name: Build images
        run: |
          docker-compose -f docker-compose.dev.yaml build
      - name: Push images
        run: |
          docker push ${{ env.WEB_IMAGE }}
          docker push ${{ env.NGINX_IMAGE }}




  # senrty:
  #  runs-on: ubuntu-latest
  #  needs: test
  #  steps: 
  #   # See: https://help.github.com/en/actions/automating-your-workflow-with-github-actions/configuring-a-workflow#using-the-checkout-action
  #   - uses: actions/checkout@v2
  #   - name: Create Sentry release
  #     uses: getsentry/action-release@v1
  #     env:
  #       SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
  #       SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
  #       SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
  #       # SENTRY_URL: https://sentry.io/
  #     with:
  #       environment: production
  # coverage:
  #   needs: test
  #   name: coverage
  #   runs-on: self-hosted
  #   steps:
  #    - uses: actions/checkout@master
  #    - uses: actions/setup-node@master
  #      with:
  #        python-version: ${{ matrix.python-version }}
  #    - name: Test & publish code coverage    
  #      uses: paambaati/codeclimate-action@v3.2.0
  #      env:
  #       CC_TEST_REPORTER_ID: 99907a756a182e45fefdf3bbc35bfdc2603aba547adc59c689a33010cb501e77
  #      with:
  #        coverageLocations: |
  #          ${{github.workspace}}/coverage.xml:coverage.py

  # heroku_git_deploy_job:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   name: deploy django app to heroku
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: akhileshns/heroku-deploy@v3.12.13 # This is the action
  #       with:
  #         heroku_api_key: ${{secrets.HEROKU_API_KEY}}
  #         heroku_app_name: "djangogithubactions" #Must be unique in Heroku
  #         heroku_email: "dserbenyukgood@gmail.com"
